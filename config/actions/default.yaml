##########
## FAIL ##
##########
- conditions:
    success: false
  actions:
    rename: "!Failed"


##############
## LEGACIES ##
##############
# We want them close to the beginning so to manually check them
# out afterwards, as each legacy can belong to any other group.
- conditions:
    legacy: true
    appraised: false
    iv:
  actions:
    appraise:
- conditions:
    legacy: true
  actions:
    favorite:
    rename: '!{calcy}'


##############
## SPECIFIC ##
##############
## Renames unowns to be renamed afterwards with emi_unowns.yaml
- conditions:
    name__in:
      - Unown
  actions:
    rename: "* The {iv_avg}"


## Appraises luckies
- conditions:
    lucky: true
    iv:
    appraised: false
  actions:
    appraise:


## Renames babies to be renamed afterwards with emi_prettify.yaml
- conditions:
    name__in: !include ../pokemons/babies.yaml
  actions:
    rename: "*{name}{iv_avg}"


## Renames random rare & bizarre stuff and those "one-time only"
## pokémons to be renamed afterwards with emi_prettify.yaml
- conditions:
    name__in: !include ../pokemons/rares.yaml
  actions:
    rename: "*{name}{iv_avg}"


## Legendaries and stuff
- conditions:
    iv:
    iv_max__gt: 90
    name__in: !include ../pokemons/legendaries.yaml
    appraised: false
  actions:
    appraise:
- conditions:
    name__in: !include ../pokemons/legendaries.yaml
    iv_max__gt: 90
  actions:
    rename: "•{calcy}" # Good ones get custom prefix
- conditions:
    name__in: !include ../pokemons/legendaries.yaml
  actions:
    rename: "{calcy}"  # The rest of them (IV <90), gets renamed without prefix


##############
### HUNDOS ###
##############
# Check possible IV100
- conditions:
    iv:
    iv_max__eq: 100
    appraised: false
  actions:
    appraise:
# If even after appraisal is not clear, rename for manual check:
- conditions:
    iv_max__eq: 100
    appraised: true
  actions:
    rename: "!{calcy}"
# Guaranteed hundos get renamed normally
- conditions:
    iv__eq: 100
  actions:
    rename: "{calcy}"


#####################
### META RELEVANT ###
#####################
# Meta-relevant high LVL AND highish IV get renamed normally
# Every other meta-relevant combination (low LVL OR low IV),
# we'll trade it below
- conditions:
    iv_max__ge: 90
    level__ge: 30
    name__in: !include ../pokemons/metarelevant.yaml
  actions:
    rename: "{calcy}"


##############
### TRADES ###
##############
# Renames pokemons to trade for candies
- conditions:
    name__in: !include ../pokemons/trade_candy.yaml
  actions:
    rename: "π{iv_avg} TRADE {level}"

# This one is for trading metarelevants with low level and any IV
- conditions:
    level__lt: 30
    name__in: !include ../pokemons/metarelevant.yaml
  actions:
    rename: "Ω{iv_avg} TRADE {level}"

# This one is for trading metarelevants with low IV and any LVL
- conditions:
    iv_max__lt: 90
    name__in: !include ../pokemons/metarelevant.yaml
  actions:
    rename: "Ω{iv_avg} TRADE {level}"

# We can also trade anything high level + hich CP, maybe we get Lucky (ha)
- conditions:
    level__ge: 30
    cp__ge: 2300
  actions:
    rename: "Ω{iv_avg} TRADE {level}"


###########################
### FOR MANUAL CHECKING ###
###########################
# Not true anymore:
# This one is for pokes which didn't match any of the three conditions above.
# For example, a IV93 LVL 12 Tyranitar wouldn't fit any of the rules above,
# So without this block it would get lost (oh you poor little monster) and
# would end on the last action, which as you'll see, we're trying to avoid :P
# - conditions:
#     name__in: !include ../pokemons/metarelevant.yaml
#   actions:
#     rename: "∞{calcy}"  # This symbol means "I've no idea what to do with it,
#                         #   gotta check afterwards."

# Renames everything else with IV 95-100 with a prefix,
# so we can quickly check out if there's actually something worth it
# and transfer shitty useless common pokemons afterwards. in theory
# all worth it 95+ pokemons would have been caught on the previous
# conditions. It's the same idea from the wildcard condition below.
- conditions:
    iv_max__ge: 95
  actions:
    rename: "∞{calcy}"


#######################
### SKIPS AND TRASH ###
#######################
# Everything else below IV95 we're skipping (that's why there's no
# action: block in here.
- conditions:
    iv_max__lt: 95

# This renames anything else that doesn't match any rule above
# which, in theory, shouldn't happen. So if you see a pokemon with
# this character you know you have a mistake on this file and most
# likely missed something.
- actions:
    rename: "¿ {calcy}"
